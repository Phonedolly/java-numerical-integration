import java.util.Scanner;

public class NPointGaussianQuadratureRule{


    public static void main(String[] args) {

        //새 Func 인스턴트를 생성할 때 생성자에 의해 조건이 입력된다
        Func func = new Func();

        /*만들어야 할 것
        INT f(x) dx, x from a to b = ((b-a)/2) * INT f(((b-a)/2)xi) + (b+a)/2) dx
         = ((b-a)/2) * SUM wi * f(((b-a)/2)xi) + (b+a)/2), i 1 to n

         Reference: https://pomax.github.io/bezierinfo/legendre-gauss.html
         */


        double resultSum = 0;

        for (int i = 0; i < func.xN.length; i++) {

            func.func(i, func.numP, func.numM); // 함수값 구하기

            //디버그 전용
            System.out.println("funcResult[" + i + "] : " + func.funcResult[i]);
            resultSum += func.funcResult[i];
        }
        double result = func.numM * resultSum;
        System.out.println("정적분의 근사값 = : " + result);
    }
}

class Func{
    public double[][] xN; //배열을 선언 후 공간을 지정해줘야 한다. Sample Point.
    public double[] funcResult;
    public double intStart; //적분 시작구간
    public double intFinal; //적분 끝나는 구간
    public int intN; //나누는 구간의 수
//    public double dx;

    double numP; // (b+a)/2
    double numM; // (b-a)/2

    public Func() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("적분구간의 시작점을 입력하십시오: x = ");
        intStart = scanner.nextInt();

        System.out.print("적분 구간의 끝점을 입력하십시오: x = ");
        intFinal = scanner.nextInt();

        numP = (intFinal + intStart) / 2; // (b+a)/2
        numM = (intFinal - intStart) / 2; // (b-a)/2

        System.out.print("Sample Point의 수를 입력하십시오: n = ");
        intN = scanner.nextInt();

        funcResult = new double[intN]; //sample point가 n개이므로, 배열 요소의 개수는 n
        xN = new double[intN][intN]; //sample point가 n개이므로, 배열 요소의 개수는 n. wi와 xi를 저장.
        // [0 가중치, 1 x좌표][순서]
        for(int j = 0; j < xN.length; j++) {

        }

        //먼저 n = 2일때로 해보자
        //가중치
        xN[0][0] = 1.000000;
        xN[0][1] = 1.000000;

        //x좌표
        xN[1][0] = -0.577350;
        xN[1][1] = 0.577350;
    }

    // f(x) = x^3
    public void func(int cycle, double numP, double numM) {
//        funcResult[cycle] = (1 * Math.pow(xN[cycle], 3)) + 0;
        funcResult[cycle] = xN[0][cycle] * (Math.pow(((numM * xN[1][cycle]) + numP), 3) + 0) ;
    }

    //TODO 수식 입력 방법 연구
    public static void inputFunc() {
        //수식을 입력 받자
        System.out.println("수식을 입력하십시오: ");
    }
}

class WeightsAbscissae {
    public static double[][] weights = {
            {1.000000, 1.000000}, //n = 2
            {0.888888, 0.555555, 0.555555},
            {0.652145, 0.652145, 0.347854, 0.347854},
            {0.568888, 0.478628, 0.478628, 0.236926, 0.236926},
            {0.360761, 0.360761, 0.467913, 0.467913, 0.171324, 0.171324},
            {0.417959, 0.381830, 0.381830, 0.279705, 0.279705, 0.129484, 0.129484},
            {0.362683, 0.362683, 0.313706, 0.313706, 0.222381, 0.222381, 0.101228, 0.101228},
            {0.330239, 0.180648, 0.180648, 0.081274, 0.081274, 0.312347, 0.312347, 0.260610, 0.260610},
            {0.295524, 0.295524, 0.269266, 0.269266, 0.219086, 0.219086, 0.149451, 0.149451, 0.066671, 0.066671}, //n = 10
            {0.272925, 0.262804, 0.262804, 0.233193, 0.233193, 0.186290, 0.186290, 0.125580, 0.125580, 0.055668, 0.055668},
            {0.249147, 0.249147, 0.233492, 0.233492, 0.203167, 0.203167, 0.160078, 0.160078, 0.106939, 0.106939, 0.047175, 0.047175},
            {0.232551, 0.226283, 0.226283, 0.207816, 0.207816, 0.178145, 0.178145, 0.138873, 0.138873, 0.092121, 0.092121, 0.040484, 0.040484},
            {0.215263, 0.215263, 0.205198, 0.205198, 0.185538, 0.185538, 0.157203, 0.157203, 0.121518, 0.121518, 0.080158, 0.080158, 0.035119, 0.035119},
            {0.202578, 0.198431, 0.198431, 0.186161, 0.186161, 0.166269, 0.166269, 0.139570, 0.139570, 0.107159, 0.107159, 0.070366, 0.070366, 0.030753, 0.030753},
            {0.189450, 0.189450, 0.182603, 0.182603, 0.169156, 0.169156, 0.149595, 0.149595, 0.124628, 0.124628, 0.095158, 0.095158, 0.062253, 0.062253, 0.027152, 0.027152},
            {0.179446, 0.176562, 0.176562, 0.168004, 0.168004, 0.154045, 0.154045, 0.135136, 0.135136, 0.111883, 0.111883, 0.085036, 0.085036, 0.055459, 0.055459, 0.024148, 0.024148},
            {0.169142, 0.169142, 0.164276, 0.164276, 0.154684, 0.154684, 0.140642, 0.140642, 0.122555, 0.122555, 0.100942, 0.100942, 0.076425, 0.076425, 0.049714, 0.049714, 0.021616, 0.021616}, //n = 18
            {0.161054, 0.158968, 0.158968, 0.152766, 0.152766, 0.142606, 0.142606, 0.128753, 0.128753, 0.111566, 0.111566, 0.091490, 0.091490, 0.069044, 0.069044, 0.044814, 0.044814, 0.019461, 0.019461}, // 힘들다..
            {0.152753, 0.152753, 0.149172, 0.149172, 0.142096, 0.142096, 0.131688, 0.131688, 0.118194, 0.118194, 0.101930, 0.101930, 0.083276, 0.083276, 0.062672, 0.062672, 0.040601, 0.040601, 0.017614, 0.017614}};



    public static double[][] abscissa = new double[20][20];

    public double data() {
        return 0;
    }

}